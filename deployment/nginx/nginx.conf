# Nginx configuration for CloudFix Changelog Automation
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=n8n:10m rate=5r/m;

    # Upstream servers
    upstream changelog_api {
        server changelog-api:8000;
        keepalive 32;
    }

    upstream n8n_server {
        server n8n:5678;
        keepalive 32;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy strict-origin-when-cross-origin;
        
        # Health check endpoint
        location /health {
            proxy_pass http://changelog_api/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health checks shouldn't be cached
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            expires -1;
        }
        
        # API endpoints
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://changelog_api;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Caching for non-sensitive endpoints
            location ~* ^/api/(health|docs|openapi\.json)$ {
                proxy_pass http://changelog_api;
                expires 5m;
                add_header Cache-Control "public, must-revalidate";
            }
        }
        
        # n8n automation platform
        location /n8n/ {
            limit_req zone=n8n burst=10 nodelay;
            
            rewrite ^/n8n/(.*)$ /$1 break;
            proxy_pass http://n8n_server;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for n8n
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # n8n timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            
            # No caching for n8n interface
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            expires -1;
        }
        
        # Static files and documentation
        location /docs {
            alias /var/www/docs;
            index index.html;
            
            # Cache static files
            expires 1h;
            add_header Cache-Control "public, immutable";
        }
        
        # Monitoring endpoints (restrict access)
        location /metrics {
            # Allow only from internal networks
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://changelog_api/metrics;
            proxy_set_header Host $host;
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /var/www/error-pages;
        }
        
        location = /404.html {
            root /var/www/error-pages;
        }
    }

    # HTTPS server (if SSL certificates are available)
    server {
        listen 443 ssl http2;
        server_name localhost;
        
        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cloudfix.crt;
        ssl_certificate_key /etc/nginx/ssl/cloudfix.key;
        
        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # Security headers for HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy strict-origin-when-cross-origin;
        
        # Redirect from HTTP to HTTPS
        if ($scheme = http) {
            return 301 https://$server_name$request_uri;
        }
        
        # Use the same location blocks as HTTP server
        include /etc/nginx/conf.d/locations.conf;
    }
}