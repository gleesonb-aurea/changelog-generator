name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  test-before-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run critical tests
      run: |
        pytest tests/unit/ tests/integration/ tests/security/ -v --tb=short --maxfail=1
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Verify security standards
      run: |
        pip install bandit safety
        bandit -r . -ll
        safety check

  deploy:
    needs: test-before-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create deployment package
      run: |
        # Create a clean deployment package
        mkdir -p deploy
        cp -r utils config streamlit_app.py requirements.txt deploy/
        
        # Remove test files and development dependencies
        find deploy/ -name "__pycache__" -type d -exec rm -rf {} + || true
        find deploy/ -name "*.pyc" -delete || true
        
        # Create version file
        echo "BUILD_DATE=$(date -u +%Y%m%d_%H%M%S)" > deploy/version.txt
        echo "GIT_COMMIT=${GITHUB_SHA}" >> deploy/version.txt
        echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> deploy/version.txt

    - name: Create deployment archive
      run: |
        cd deploy
        tar -czf ../changelog-generator-${{ github.sha }}.tar.gz *

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: changelog-generator-${{ github.sha }}.tar.gz

    # Uncomment and configure these steps for actual deployment
    # - name: Deploy to staging
    #   if: github.ref == 'refs/heads/main'
    #   run: |
    #     # Deploy to staging environment
    #     echo "Deploying to staging..."

    # - name: Deploy to production
    #   if: startsWith(github.ref, 'refs/tags/')
    #   run: |
    #     # Deploy to production environment
    #     echo "Deploying to production..."

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          - Automated release from GitHub Actions
          - All tests passed
          - Security scans completed
          
          ## Deployment Package
          The deployment package is available as an artifact in this workflow run.
        draft: false
        prerelease: false

  post-deploy-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Run smoke tests
      run: |
        echo "Running post-deployment smoke tests..."
        # Add actual smoke tests here
        # These would test that the deployed application is working correctly

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment completed successfully"
        else
          echo "❌ Deployment failed"
          exit 1
        fi